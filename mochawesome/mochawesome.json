{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-15T06:42:34.123Z",
    "end": "2024-10-15T06:42:43.461Z",
    "duration": 9338,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b30d333a-ef2c-4e24-8d3a-9b1e4f7213b3",
      "title": "",
      "fullFile": "C:\\Users\\anmol.dhama\\Desktop\\Api Automation\\test\\create_order.js",
      "file": "\\test\\create_order.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
          "title": "Create Order API",
          "fullFile": "C:\\Users\\anmol.dhama\\Desktop\\Api Automation\\test\\create_order.js",
          "file": "\\test\\create_order.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create an order successfully",
              "fullTitle": "Create Order API should create an order successfully",
              "timedOut": false,
              "duration": 1314,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\ncreate_an_order(payload,orderCode);\n// console.log(payload);\n// Get expected assertions for this specific index\nconst expectedAssertions = getExpectedAssertions(orderCode);\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "01bcdbc6-a55d-4a6f-a54d-617666ba380d",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with already \"Exist pickup location\" successfully",
              "fullTitle": "Create Order API should create an order with already \"Exist pickup location\" successfully",
              "timedOut": false,
              "duration": 802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nexist_pickup_location(payload, orderCode, UAT_PICKUP_LOCATION);\nconst expectedAssertions = getExpectedAssertions(orderCode);\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "c94d52f9-b783-4d91-bf34-8bff0bba5287",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"New pickup location\" successfully",
              "fullTitle": "Create Order API should create an order with \"New pickup location\" successfully",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst contact_name = generateContactName(); \n// payload.orderId = orderCode;\nnew_pickup_location(payload, orderCode, contact_name);\nconst expectedAssertions = getExpectedAssertions(orderCode);\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "348d7cde-6223-41b4-a636-7978301ce325",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"Billing is shipping flag false\" successfully",
              "fullTitle": "Create Order API should create an order with \"Billing is shipping flag false\" successfully",
              "timedOut": false,
              "duration": 929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst billingIsShipping = false;\n\nbilling_is_shipping_flag_false(payload, orderCode, billingIsShipping)\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "b3113b57-46fd-420a-a07f-798aa84bd8f6",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"New Item Name\" successfully",
              "fullTitle": "Create Order API should create an order with \"New Item Name\" successfully",
              "timedOut": false,
              "duration": 913,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst item_name = generateContactName();\nnew_item_name(payload, orderCode, item_name)\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "4fc8c461-a9f1-462f-8764-800732f1073c",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"New SKU\" successfully",
              "fullTitle": "Create Order API should create an order with \"New SKU\" successfully",
              "timedOut": false,
              "duration": 923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst sku_name = generateContactName();\nnew_SKU(payload, orderCode, sku_name);\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "596e00f1-9502-4bb5-8476-8efcadc3ea55",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"New SKU Details\" successfully",
              "fullTitle": "Create Order API should create an order with \"New SKU Details\" successfully",
              "timedOut": false,
              "duration": 860,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst sku_name = generateContactName();\nconst description = \"It is a new description\";\nconst units = 2;\nconst unitPrice = 90;\nconst tax = 0;\nconst hsn = \"101011\";\nconst productLength = 12;\nconst productBreadth = 13;\nconst productHeight = 14;\nconst productWeight = 1.3;\nconst brand = \"Brand b\";\nconst imageURL = \"http://example.com/prod.jpg\";\nnew_SKU_details(payload, orderCode, sku_name,description, units,unitPrice, tax, hsn,productLength, productBreadth,productHeight, productWeight,brand, imageURL);\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "f84f7f64-c481-4d26-af4f-86d5b2ffd556",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"Prepaid Payment Method\" successfully",
              "fullTitle": "Create Order API should create an order with \"Prepaid Payment Method\" successfully",
              "timedOut": false,
              "duration": 975,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst paymentMethod = \"PREPAID\";\nprepaid_payment_method(payload, orderCode,paymentMethod );\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "855e890f-198e-4788-98d5-014eaad3b01f",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"Random Extra Charges\" successfully",
              "fullTitle": "Create Order API should create an order with \"Random Extra Charges\" successfully",
              "timedOut": false,
              "duration": 920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nconst shippingCharges = 140;\nconst giftWrapCharges = 21;\nconst transactionCharges = 22;\nconst totalDiscount = 23;\nconst totalOrderValue = 24;\nconst codCharges = 25;\nconst prepaidAmount = 26;\nrandom_extra_charges(payload,\n   orderCode,\n    shippingCharges,\n    giftWrapCharges,\n    transactionCharges,\n    totalDiscount,\n    totalOrderValue,\n    codCharges,\n    prepaidAmount )\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "b9db9ce8-a3f9-4cb9-8a5e-05f563e9e7fa",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create an order with \"Random Package Details\" successfully",
              "fullTitle": "Create Order API should create an order with \"Random Package Details\" successfully",
              "timedOut": false,
              "duration": 868,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = JSON.parse(createOrderPayload());\nconst orderCode = generateOrderCode();\nrandom_package_details(payload, orderCode);\nconst expectedAssertions = getExpectedAssertions(orderCode);\n\ntry {\n  const response = await createOrder('create_order', payload);\n  // Validate the response for the current payload and assertions\n  validateCreateOrderResponse(response.data, expectedAssertions);\n} catch (error) {\n  console.error(`Error in payload`, error.response ? error.response.data : error.message);\n  if (error.response) {\n    expect.fail(`API request failed for payload with status: ${error.response.status}, data: ${JSON.stringify(error.response.data)}`);\n  } else {\n    expect.fail(`Unexpected error at payload: ${error.message}`);\n  }\n}",
              "err": {},
              "uuid": "d46fdf39-f30b-4247-ad29-9e4011c9c081",
              "parentUUID": "7b728c21-1d4d-403f-8c7d-d842861f4e6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "01bcdbc6-a55d-4a6f-a54d-617666ba380d",
            "c94d52f9-b783-4d91-bf34-8bff0bba5287",
            "348d7cde-6223-41b4-a636-7978301ce325",
            "b3113b57-46fd-420a-a07f-798aa84bd8f6",
            "4fc8c461-a9f1-462f-8764-800732f1073c",
            "596e00f1-9502-4bb5-8476-8efcadc3ea55",
            "f84f7f64-c481-4d26-af4f-86d5b2ffd556",
            "855e890f-198e-4788-98d5-014eaad3b01f",
            "b9db9ce8-a3f9-4cb9-8a5e-05f563e9e7fa",
            "d46fdf39-f30b-4247-ad29-9e4011c9c081"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9315,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome"
      },
      "version": "6.2.0"
    }
  }
}