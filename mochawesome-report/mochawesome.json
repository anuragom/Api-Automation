{
  "stats": {
    "suites": 2,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-09T12:52:55.195Z",
    "end": "2024-10-09T12:52:58.357Z",
    "duration": 3162,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0e463c46-cb9e-4d6c-9408-7bd69adc5c26",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77ba9c2e-9e59-4ee9-901d-bb08bad86d39",
          "title": "Serviceability Check API",
          "fullFile": "C:\\Users\\anmol.dhama\\Desktop\\Api Automation\\test\\serviceability_check.js",
          "file": "\\test\\serviceability_check.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should Check Serviceability successfully",
              "fullTitle": "Serviceability Check API should Check Serviceability successfully",
              "timedOut": false,
              "duration": 424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const Pickup_pincode = \"110001\";\nconst Delivery_pincode = \"110003\";\nconst cod = true;\nconst total_order_value = 2000;\nconst weight = 1.12;\n// console.log('Generated Order Code:', orderCode);\nconst payload = serviceability_check_payload(Pickup_pincode,Delivery_pincode,cod,total_order_value,weight);\n\ntry {\n  const response = await axios.post(`${baseURL}/serviceabilty_check`, payload, {\n    headers: external_apis_headers\n  });\n//   console.log(response.data);\n  // Validate response structure first\n  expect(response.data).to.have.property('status');\n  expect(response.data).to.have.property('remark');\n  expect(response.data).to.have.property('serviceable_courier_list');\n// // // //   // Add assertions to verify the response\n  expect(response.data.status).to.equal(true, 'Expected status to be true');\n  expect(response.data.remark).to.equal('Success', 'Expected Remarks');\n  expect(response.data.serviceable_courier_list.length).to.equal(11,'Expected count of courier');\n\n} catch (error) {\n  console.error('Error:', error.response ? error.response.data : error.message);\n  // In case of failure, we can add more checks on the error response if necessary\n  if (error.response) {\n    expect.fail('API request failed with status:', error.response.status);\n  } else {\n    expect.fail('Unexpected error:', error.message);\n  }\n}",
              "err": {},
              "uuid": "95216bf9-bdf9-4f60-9fa1-5fcc19cc03e3",
              "parentUUID": "77ba9c2e-9e59-4ee9-901d-bb08bad86d39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95216bf9-bdf9-4f60-9fa1-5fcc19cc03e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 424,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14b5288d-c6d1-4972-a3a2-0163f87a83c1",
          "title": "Wrapper API",
          "fullFile": "C:\\Users\\anmol.dhama\\Desktop\\Api Automation\\test\\wrapper.js",
          "file": "\\test\\wrapper.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create order with wrapper successfully",
              "fullTitle": "Wrapper API should create order with wrapper successfully",
              "timedOut": false,
              "duration": 2731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Optional: Extend timeout if necessary\nthis.timeout(5000); // Increase timeout to 5 seconds if your API takes time\n  \nconst payload = wrapperPayload(orderCode);\n    \n    try {\nconst response = await axios.post(`${baseURL}/wrapper`, payload, {\n  headers: external_apis_headers\n});\nconsole.log('Response:', response.data);\n// Validate response structure first\nexpect(response.data).to.have.property('status');\nexpect(response.data).to.have.property('orderId');\nexpect(response.data).to.have.property('remarks');\nexpect(response.data).to.have.property('orderCreated');\nexpect(response.data).to.have.property('shipment');\n    //   // Add assertions to verify the response\nexpect(response.data.status).to.equal('SUCCESS', 'Expected status to be SUCCESS');\nexpect(response.data.remarks).to.equal('', 'Expected remarks');\nexpect(response.data.orderId).to.equal(global_order_id, 'Expected order id');\nexpect(response.data.orderCreated).to.equal(true, 'Expected order creation value');\nexpect(response.data.shipment[0].awbGenerated).to.equal(true, 'Expected awb generated field');\nexpect(response.data.shipment[0].labelGenerated).to.equal(true, 'Expected label Generated field');\nexpect(response.data.shipment[0].pickupScheduled).to.equal(true, 'Expected pickup Scheduled field');\n\n    } catch (error) {\nconsole.error('Error:', error.response ? error.response.data : error.message);\n// In case of failure, we can add more checks on the error response if necessary\nif (error.response) {\n  expect.fail('API request failed with status:', error.response.status);\n} else {\n  expect.fail('Unexpected error:', error.message);\n}\n    }",
              "err": {},
              "uuid": "c6da1710-bae2-4333-affe-bb51a35a8b47",
              "parentUUID": "14b5288d-c6d1-4972-a3a2-0163f87a83c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6da1710-bae2-4333-affe-bb51a35a8b47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2731,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}